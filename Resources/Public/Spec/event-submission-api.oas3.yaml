---
openapi: 3.0.0
info:
  version: 0.1.0
  title: Event Submission API
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: '{environment}/{apiPath}'
    variables:
      apiPath:
        default: api
      environment:
        default: iki.ddev.site    # DDEV server
        enum:
          - https://international-climate-initiative.de         # Production server
          - https://iki-v11.stg.typo3.zug.321.works             # Staging server
          - http://localhost:8080

paths:
  /user/sendValidationRequest:
    post:
      summary: Validate an email
      description: >
        A given email address will be validated by sending a mail to it. This mail
        contains a link which must be opened in order to prove that the user has access
        to this mail.
      requestBody:
        description: Email address and validation link
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailValidationRequest'
      responses:
        200:
          description: Validation request successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailValidationSendSuccess'
        503:
          description: Email could not be send due to internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailValidationSendError'
  /event/:
    post:
      summary: Create a new event proposal
      operationId: postEvent
      security:
        - bearerAuth: [ ]
      requestBody:
        description: Event proposal that should be submitted.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '200':
          description: Event proposal successful postet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCreatedResult'
        '400':
          description: Event proposal post unsuccessful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCreatedError'
  /{language}/event/{id}:
    get:
      summary: Get a single event proposal
      operationId: getEvent
      parameters:
        - name: language
          in: path
          required: true
          schema:
            type: string
            enum: [ de,en ]
            default: de
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventGetResult'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventGetError'
    put:
      summary: Change an existing event proposal
      operationId: putEvent
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: language
          in: path
          required: true
          schema:
            type: string
            enum: [ de,en ]
            default: de
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Successfully changed event proposal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventUpdatedResult'
        '403':
          description: Response for failed update of event proposal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventUpdateError'
    delete:
      summary: Delete an event proposal
      operationId: deleteEvent
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully deleted event proposal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDeletedResult'
        '403':
          description: Access denied
        '410':
          description: |
            Event proposal could not be deleted. It doesn't exist anymore or has been approved and is
            about to be published.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDeleteError'
  /{language}/event/{id}/withdraw:
    put:
      summary: Withdraw an existing event proposal
      operationId: putWithdrawEvent
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: language
          in: path
          required: true
          schema:
            type: string
            enum: [ de,en ]
            default: de
      responses:
        '200':
          description: Successfully withdrawn event proposal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventWithdrawResult'
        '403':
          description: Response for failed withdrawal of event proposal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventWithdrawError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: uuid4
  schemas:
    Event:
      type: object
      required:
        - email
        - title
        - teaser
        - datetime
        - event_end
        - timezone
        - bodytext
      description: Event proposal
      properties:
        approved:
          type: boolean
          description: Approval status of event submission
          example: true
        status:
          type: string
          enum:
            - unknown
            - new
            - approved
            - eventCreated
            - updated
            - withdrawn
            - error
          description: |
            Reflects the status of the event submission during its live cycle. Some values may
            be irrelevant for frontend editing an not be valid for POST or PUT requests.
          example: eventCreated
        email:
          type: string
          format: email
          description: >
            Email of the submitter. This mail must match the validated mail and
            will be saved and used for later  contact.
          example: nix@foo.org
        title:
          type: string
          example: A event proposal with title
        teaser:
          type: string
          example: >
            Teaser text for event proposal. The teaser must not
            contain any html tags
        datetime:
          type: string
          format: date-time
          description: Start date and time of an event
          example: 2017-07-21T17:00:00
        event_end:
          type: string
          format: date-time
          description: End date and time of an event
          example: 2017-07-21T19:00:00
        timezone:
          type: string
          description: Unique timezone name provided by database
          example: Europe/Berlin
        bodytext:
          type: string
          description: Description of event
          example: Do not miss this event! It will be awesome.
        event_mode:
          type: string
          enum: [ on_site, online, hybrid ]
          description: Selected value for event mode.
          example: hybrid
          default: on_site
        organizer_simple:
          type: string
          maxLength: 255
          description: 'Organizer of an event. (Note: This property is not a reference)'
          example: International Climate Initiative
        location:
          type: object
          required:
            - location_title
          description: Location for event proposal
          properties:
            location_title:
              type: string
              maxLength: 250
              example: A cool location
              description: Location title of an event.
            location_short_title:
              type: string
              maxLength: 30
              example: A cool little location
              description: Short location title of an event.
            location_description:
              type: string
              example: A cool little location description like an address
              description: Location description like an address.
        external_reference:
          type: string
          example: Foo external reference for event
          description: Optional reference for the event e.g.
        registration_link:
          type: string
          example: https://link.to.registration
          description: Optional registration link
        streaming_link:
          type: string
          example: https://link.to.stream
          description: Optional streaming link
        country:
          type: integer
          description: Unique id of country where the event should take place.
          example: 13
        language:
          type: string
          enum: [ de,en ]
          default: de
          description: Language for the event.
    EventCreatedResult:
      type: object
      description: Response for successful creation of an Event
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      properties:
        message:
          example: Event submission created successful
        code:
          example: 100
        data:
          type: object
          properties:
            editToken:
              type: string
              format: uuid
              example: 513d03ce-6eeb-4134-9198-484176a5c314
              description: Token for editing the newly created event proposal.
            id:
              type: string
              format: uuid
              example: 40ff4e68-1c64-4551-8b37-453b35ada721
              description: Universal unique identifier of the event proposal.
    EventCreatedError:
      type: object
      description: Response for unsuccessful creation of an Event
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      properties:
        message:
          example: Event submission unsuccessful
        code:
          example: 400
    EventUpdatedResult:
      type: object
      description: Response for successful change of an event
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      properties:
        code:
          example: 200
        message:
          example: Event submission successfully replaced
        data:
          allOf:
            - $ref: '#/components/schemas/Event'
    EventWithdrawResult:
      type: object
      description: Response for successful withdrawal of an event
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      properties:
        code:
          example: 200
        message:
          example: Event submission successfully withdrawn
        data:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: 40ff4e68-1c64-4551-8b37-453b35ada721
              description: Universal unique identifier of the event proposal.
    EventWithdrawError:
      type: object
      description: Response for failing deletion of an event submission
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      properties:
        message:
          example: Event submission could not be withdrawn
          description: Message about failed withdrawal of event.
        data:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: 40ff4e68-1c64-4551-8b37-453b35ada721
              description: Universal unique identifier of the event proposal.
    EventGetResult:
      type: object
      description: Response for successful GET request of an event submission
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      properties:
        code:
          example: 700
        message:
          example: Event submission found
        data:
          allOf:
            - $ref: '#/components/schemas/Event'
    EventGetError:
      type: object
      description: Response for failed GET request of an event submission
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      properties:
        code:
          example: 800
        message:
          example: Requested event submission could not be found
    EventUpdateError:
      type: object
      description: Response for failed update of an event proposal
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      properties:
        code:
          example: 600
        message:
          example: Update of event proposal failed
    ApiResponse:
      type: object
      description: A response from API
      properties:
        code:
          type: integer
          example: 123
        message:
          type: string
          example: Successful request.
    EventDeletedResult:
      type: object
      description: Response for successful deletion of an Event
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      properties:
        message:
          example: Event proposal deleted
          description: Message about successful deletion of event.
        data:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: 40ff4e68-1c64-4551-8b37-453b35ada721
              description: Universal unique identifier of the event proposal.
    EventDeleteError:
      type: object
      description: Response for failing deletion of an event submission
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      properties:
        message:
          example: Event submission could not be deleted
          description: Message about failed deletion of event.
        data:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: 40ff4e68-1c64-4551-8b37-453b35ada721
              description: Universal unique identifier of the event proposal.
    EmailValidationRequest:
      type: object
      description: >
        Request for email validation. Contains an email to which a validation link
        should be sent and a  hash value for the validation of this link in Frontend.
      required:
        - email
        - validationHash
      properties:
        email:
          type: string
          format: email
          example: foo@bar.do
        validationHash:
          type: string
          format: uuid
          example: dfde719e-9f19-40b5-af2e-6f96d4034cda
    EmailValidationSendSuccess:
      type: object
      description: >
        Result for email validation. Contains the previously given hash value
        for the validation of this link in Frontend.
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      properties:
        message:
          example: Validation email successfully sent
        code:
          example: 300
    EmailValidationSendError:
      type: object
      description: >
        Result for email validation. Contains the previously given hash value
        for the validation of this link in Frontend.
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      properties:
        message:
          example: Validation email could not be sent
        code:
          example: 500
